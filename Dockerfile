# =============================================================================
# マルチステージDockerビルド設定ファイル（Golang版）
# =============================================================================
# 目的: セキュアで最適化されたプロダクション用コンテナイメージの作成
# 特徴: 静的バイナリ生成、セキュリティ強化、イメージサイズ最小化

# =============================================================================
# ビルドステージ: Goアプリケーションのコンパイル
# =============================================================================
FROM golang:1.21-alpine AS builder

# ビルド最適化のためのツールインストール
# ca-certificates: HTTPSアクセス用証明書
# git: プライベートモジュール取得用（必要に応じて）
RUN apk add --no-cache ca-certificates git

# 作業ディレクトリ設定
WORKDIR /build

# Go modules設定ファイルをコピー（依存関係キャッシュ最適化）
# go.mod, go.sum: Goの依存関係管理ファイル
COPY go.mod go.sum* ./

# 依存関係ダウンロード（ソースコード変更時のビルド高速化）
# go mod download: 依存パッケージを事前取得
RUN go mod download

# ソースコード全体をコピー
COPY . .

# 静的バイナリとしてビルド
# CGO_ENABLED=0: Cライブラリ依存を無効化（完全静的リンク）
# GOOS=linux: Linuxターゲット指定
# -a: 全パッケージを再ビルド
# -installsuffix cgo: CGO無効化用サフィックス
# -o app: 出力バイナリ名指定
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .

# =============================================================================
# 実行ステージ: 最小限の実行環境
# =============================================================================
FROM scratch

# 証明書をコピー（HTTPS通信用）
# scratch imageには証明書が含まれないため明示的にコピー
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# ビルドしたバイナリをコピー
# 静的リンクバイナリのため、これだけで実行可能
COPY --from=builder /build/app /app

# アプリケーション実行ポート公開
# Cloud Runでは PORT 環境変数が動的に設定される
EXPOSE 8080

# バイナリ実行
# 非rootユーザー不要：scratchイメージにはユーザー管理機能なし
# セキュリティ：静的バイナリで攻撃面を最小化
CMD ["/app"]