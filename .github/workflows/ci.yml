# =============================================================================
# CI ワークフロー (Golang版)
# =============================================================================
# 目的: 基本的なコード品質保証とテスト実行
# 実行タイミング: PR作成時 + mainブランチプッシュ時
# SRE要件: 変更の安全性確保

name: CI

# =============================================================================
# トリガー設定: プルリクエストとmainブランチプッシュ
# =============================================================================
on:
  pull_request:
    branches: [main]    # mainブランチ向けPRで実行
  push:
    branches: [main]    # mainブランチプッシュで実行

# =============================================================================
# 権限設定: 最小権限の原則
# =============================================================================
permissions:
  contents: read      # リポジトリの読み取りのみ

# =============================================================================
# ジョブ定義: Golang CI処理
# =============================================================================
jobs:
  ci:
    name: Golang CI Pipeline
    runs-on: ubuntu-latest    # Ubuntu最新版で実行
    
    steps:
      # ===============================================================
      # ソースコード取得
      # ===============================================================
      - name: Checkout code
        uses: actions/checkout@v4
        # リポジトリのソースコードを取得
      
      # ===============================================================
      # Go環境セットアップ
      # ===============================================================
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'        # Go 1.21を使用
          cache: true               # Go modulesキャッシュを有効化
        # Go環境の初期化とキャッシュ設定
        # キャッシュにより依存関係ダウンロード時間を短縮
      
      # ===============================================================
      # 依存関係ダウンロード
      # ===============================================================
      - name: Download dependencies
        run: go mod download
        # go.modで定義された依存パッケージをダウンロード
        # ビルド前の事前処理で依存関係を解決
      
      # ===============================================================
      # コード品質チェック
      # ===============================================================
      - name: Run gofmt check
        run: |
          if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'gofmt -w .'"
            gofmt -l .
            exit 1
          fi
        # gofmt: Goの標準フォーマッター
        # コードスタイルの統一性をチェック
        # フォーマット違反があると失敗
      
      - name: Run go vet
        run: go vet ./...
        # go vet: Goの静的解析ツール
        # 潜在的なバグや問題のあるコードパターンを検出
        # 構文エラーや型安全性の問題をチェック
      
      # ===============================================================
      # テスト実行
      # ===============================================================
      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
        # go test: 単体テスト実行
        # -v: 詳細出力
        # -race: 競合状態検出
        # -coverprofile: カバレッジレポート生成
      
      # ===============================================================
      # テストカバレッジレポート
      # ===============================================================
      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html
        # カバレッジレポートをHTML形式で生成
        # テスト品質の可視化
      
      # ===============================================================
      # ビルド確認
      # ===============================================================
      - name: Build application
        run: go build -v ./...
        # アプリケーションのビルド確認
        # コンパイルエラーの事前検出
        # 実際のバイナリ生成はせずビルド可能性のみチェック