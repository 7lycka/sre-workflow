# =============================================================================
# セキュリティゲートワークフロー - プルリクエスト時のセキュリティチェック
# =============================================================================
# 【概要】
# このワークフローはプルリクエスト作成時に実行され、以下のセキュリティチェックを行います：
# 1. SBOM（ソフトウェア部品表）生成 - 使用ライブラリの透明性確保
# 2. ソースコード脆弱性スキャン - 既知の脆弱性を早期発見
# 3. コンテナイメージ脆弱性スキャン - ランタイム環境の安全性確保
#
# 【実行条件】
# - mainブランチ向けプルリクエスト作成・更新時
# - 脆弱性検出時はPRマージをブロック（必須チェック）
#
# 【セキュリティ原則】
# - 最小権限の原則に従い、必要最小限の権限のみ付与
# - イメージ署名はPR段階では実行せず、mainマージ後の本番用ビルドでのみ実行
# =============================================================================

name: Security Gate

# =============================================================================
# トリガー設定 - プルリクエスト時のみ実行
# =============================================================================
on:
  pull_request:
    branches: [main]    # mainブランチ向けPRのみ対象（開発ブランチは対象外）

# =============================================================================
# 権限設定 - セキュリティ原則に基づく最小権限
# =============================================================================
permissions:
  contents: read        # リポジトリコードの読み取りのみ許可
  # 注意: PR段階ではコンテナ署名を行わないため id-token: write は不要
  # コンテナ署名は mainブランチマージ後の publish-image.yml でのみ実行

# =============================================================================
# セキュリティスキャンジョブ - SBOM生成と脆弱性検出
# =============================================================================
jobs:
  security-scan:
    name: Security Scan & SBOM Generation
    runs-on: ubuntu-latest
    
    steps:
      # ===============================================================
      # ステップ1: ソースコード取得
      # ===============================================================
      - name: Checkout source code
        uses: actions/checkout@v4
        # プルリクエストのソースコードを取得
        # セキュリティスキャンの対象となるコードベース

      # ===============================================================
      # ステップ2: Docker Buildx環境セットアップ
      # ===============================================================
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # Docker Buildx: マルチプラットフォーム対応の高度なビルド機能
        # 複雑なDockerfileのビルドとキャッシュ最適化に必要

      # ===============================================================
      # ステップ3: テスト用Dockerイメージビルド（ローカルのみ）
      # ===============================================================
      - name: Build container image for security scanning
        run: |
          docker build -t ghcr.io/7lycka/sre-workflow:pr-${{ github.sha }} .
          echo "Built image: ghcr.io/7lycka/sre-workflow:pr-${{ github.sha }}"
        # 【重要】このイメージはレジストリにPUSHしない（ローカルビルドのみ）
        # PR段階では一時的なテスト用イメージとして使用
        # タグにコミットハッシュを使用してユニーク性を確保

      # ===============================================================
      # ステップ4: SBOM（ソフトウェア部品表）生成
      # ===============================================================
      - name: Generate Software Bill of Materials (SBOM)
        run: |
          echo "Generating SBOM with Syft..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            anchore/syft ghcr.io/7lycka/sre-workflow:pr-${{ github.sha }} -o spdx-json > sbom.spdx.json
          echo "SBOM generated successfully"
          echo "SBOM file size: $(du -h sbom.spdx.json | cut -f1)"
        # Syft: Anchore社製のオープンソースSBOM生成ツール
        # SPDX-JSON: Software Package Data Exchange形式（業界標準）
        # 目的: 使用している全ライブラリとその依存関係の透明性確保
        # コンプライアンス要件やサプライチェーン攻撃対策に必須

      # ===============================================================
      # ステップ5: ソースコードの脆弱性スキャン
      # ===============================================================
      - name: Scan source code for vulnerabilities
        run: |
          echo "Scanning source code with Trivy..."
          docker run --rm -v "$PWD:/workspace" \
            aquasec/trivy fs --severity HIGH,CRITICAL --exit-code 1 /workspace
          echo "Source code scan completed - no HIGH/CRITICAL vulnerabilities found"
        # Trivy filesystem mode: ソースコード内の既知脆弱性を検出
        # 対象: go.mod、package.json、Dockerfile等の依存関係定義ファイル
        # HIGH/CRITICAL: 重大度フィルタ（中程度以下は警告のみ）
        # exit-code 1: 脆弱性発見時はジョブを失敗させてPRマージをブロック

      # ===============================================================
      # ステップ6: コンテナイメージの脆弱性スキャン
      # ===============================================================
      - name: Scan container image for vulnerabilities
        run: |
          echo "Scanning container image with Trivy..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --severity HIGH,CRITICAL --exit-code 1 ghcr.io/7lycka/sre-workflow:pr-${{ github.sha }}
          echo "Container image scan completed - no HIGH/CRITICAL vulnerabilities found"
        # Trivy image mode: コンテナイメージ内のランタイム脆弱性を検出
        # 対象: OS パッケージ、言語固有ライブラリ、設定ファイル
        # Docker socket マウント: ローカルイメージへのアクセスに必要
        # 本番環境で実際に動作するイメージの安全性を保証

      # ===============================================================
      # ステップ7: セキュリティスキャン結果レポート生成
      # ===============================================================
      - name: Generate security scan report
        if: always()  # 前のステップが失敗しても実行
        run: |
          echo "Generating comprehensive security report..."

          # 詳細なスキャン結果をファイルに出力（失敗時のデバッグ用）
          docker run --rm -v "$PWD:/workspace" \
            aquasec/trivy fs --format json --output /workspace/trivy-fs-report.json /workspace || true

          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v "$PWD:/workspace" aquasec/trivy image --format json \
            --output /workspace/trivy-image-report.json ghcr.io/7lycka/sre-workflow:pr-${{ github.sha }} || true

          echo "Security reports generated"
          ls -la *report.json sbom.spdx.json 2>/dev/null || echo "No report files found"

      # ===============================================================
      # ステップ8: セキュリティアーティファクト保存
      # ===============================================================
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()  # スキャンが失敗した場合でもアーティファクトを保存
        with:
          name: security-artifacts-pr-${{ github.sha }}
          path: |
            sbom.spdx.json
            trivy-fs-report.json
            trivy-image-report.json
          retention-days: 30
        # アーティファクトの用途:
        # 1. PRレビュー時のSBOM確認
        # 2. セキュリティ監査のエビデンス
        # 3. 脆弱性修正時の参考資料
        # 4. コンプライアンス報告書作成
